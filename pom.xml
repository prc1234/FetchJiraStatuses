<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>JiraStatus</groupId>
	<artifactId>JiraStatuses</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<!-- A Dependency on slf4j is optional, but is necessary if you want to 
			get debug logging output from the JRJC, and it also prevents the SLF4j warning 
			message on start-up -->
		<dependency>
			<!-- SLF4J is distributed under the MIT license. The MIT license is known 
				to be compatible with the Apache 2.0 license. -->
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.6.4</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1.1</version>
		</dependency>
		
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4</version>
		</dependency>

		<dependency>
			<!-- JRJC is distributed under the Apache 2.0 license. -->
			<groupId>com.atlassian.jira</groupId>
			<artifactId>jira-rest-java-client</artifactId>
			<version>2.0.0-m2</version>
			<exclusions>
				<exclusion>
					<!-- Not excluding this will pull in both stax:stax-api:1.0.1 and javax.xml.stream:stax-api:1.0.2 
						as transitive dependencies. We don't want both, and not excluding this will 
						give you a duplicate warning when the dependencies are shaded into the jar 
						by the maven-shade-plugin -->
					<groupId>stax</groupId>
					<artifactId>stax-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<!-- Use the maven shade plugin to pull in all the transitive dependencies 
				into a single executable jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.0</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<transformers>
						<transformer
							implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
							<mainClass>com.atlassian.jira.examples.Main</mainClass>
						</transformer>
					</transformers>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<!-- The JRJC has a number of other dependencies that must be on the Java 
		Classpath in order to execute. Atlassian hosts them all in our public Maven 
		repository (along with the JRJC itself!), so you can use maven to download 
		them all automatically. Your maven client needs to know where the Atlassian 
		Maven repository is located in order to do this. It's generally considered 
		bad practice to embed repository information directly into a project's pom.xml 
		(there is a dedicated settings.xml file on your client where it should go), 
		but putting the information here makes the project more portable. -->
	<repositories>
		<repository>
			<id>atlassian-public</id>
			<url>https://m2proxy.atlassian.com/repository/public</url>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>daily</updatePolicy>
				<checksumPolicy>warn</checksumPolicy>
			</snapshots>
			<releases>
				<enabled>true</enabled>
				<checksumPolicy>warn</checksumPolicy>
			</releases>
		</repository>
	</repositories>
</project>